// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Disclaimer:
//The content shared on this channel reflects personal opinions and interpretations intended for educational and informational purposes only. It is not professional advice, nor should it be relied upon as such.
//Viewers are encouraged to consult qualified professionals before making decisions based on the material presented. While every effort is made to ensure accuracy, the creator makes no guarantees regarding completeness, reliability, or applicability to individual circumstances.

//@version=6


strategy(
     "EMA Cross Strategy",
     overlay=true,
     calc_on_every_tick=true,
     currency=currency.AUD
     )

// INPUT:
if not timeframe.isweekly
    runtime.error("Please use this script on a weekly chart.")


// Options to enter fast and slow Exponential Moving Average (EMA) values
emaFast = input.int(title="Fast EMA", defval=20, minval=1, maxval=9999)
emaSlow = input.int(title="Slow EMA", defval=50, minval=1, maxval=9999)
tradeDirection = input.string(title="Trade Direction", options=["Long", "Short", "Both"], defval="Long")
startDate = input.time(title="Start Date", defval=timestamp("01 Jan 1970 00:00"))
endDate = input.time(title="End Date", defval=timestamp("31 Dec 2170 23:59"))

// CALCULATIONS:

// CALCULATIONS:

// Use the built-in function to calculate two EMA lines
fastEMA = ta.ema(close, emaFast)
slowEMA = ta.ema(close, emaSlow)


// PLOT:

// Draw the EMA lines on the chart
plot(fastEMA, color=color.green, linewidth=2)
plot(slowEMA, color=color.red, linewidth=2)


// CONDITIONS:

inDateRange = (time >= startDate) and (time < endDate)
longOK  = (tradeDirection == "Long") or (tradeDirection == "Both")
shortOK = (tradeDirection == "Short") or (tradeDirection == "Both")
longCondition = ta.crossover(fastEMA, slowEMA)
shortCondition = ta.crossunder(fastEMA, slowEMA)
// Highlight crossover
plotshape(longCondition, title="Bullish Crossover", location=location.top, color=color.lime, style=shape.labelup, text="20>50 Bullish")
plotshape(shortCondition, title="Bearish Crossover", location=location.bottom, color=color.rgb(230, 0, 0), style=shape.labelup, text="20<50 Bearish")

// ORDERS:

// Submit entry (or reverse) orders
if (longCondition and inDateRange and longOK)
    strategy.entry("long", strategy.long)
    alert("EMA 50 crossed above EMA 200 - Buy Signal!", alert.freq_once_per_bar_close)
if (shortCondition and inDateRange and shortOK)
    strategy.entry("short", strategy.short)
    alert("EMA 50 crossed below EMA 200 - Buy Signal!", alert.freq_once_per_bar_close)

    
// Submit exit orders in the cases where we trade only long or only short
if (strategy.position_size > 0 and shortCondition)
    strategy.close("long")
if (strategy.position_size < 0 and longCondition)
    strategy.close("short")

// --- Bollinger Bands Indicator ---
bb_length = input.int(20, minval=1, title="BB Length")
bb_maType = input.string("SMA", "BB Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"])
bb_src = input(close, title="BB Source")
bb_mult = input.float(2.0, minval=0.001, maxval=50, title="BB StdDev")
bb_offset = input.int(0, "BB Offset", minval = -500, maxval = 500, display = display.data_window)

bb_ma(source, length, _type) =>
    switch _type
        "SMA" => ta.sma(source, length)
        "EMA" => ta.ema(source, length)
      

bb_basis = bb_ma(bb_src, bb_length, bb_maType)
bb_dev = bb_mult * ta.stdev(bb_src, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

plot(bb_basis, "BB Basis", color=#2962FF, offset = bb_offset)
bb_p1 = plot(bb_upper, "BB Upper", color=color.yellow, offset = bb_offset)
bb_p2 = plot(bb_lower, "BB Lower", color=color.yellow, offset = bb_offset)
fill(bb_p2, bb_p1, title = "BB Background", color=color.rgb(91, 152, 212, 75))


// Fill outer zones
bgcolor(close >= bb_basis ? color.new(color.green, 85) : na)
bgcolor(close <= bb_basis ? color.new(color.red, 85) : na)



